// ==========================================
// AUTHCONTEXT AM√âLIOR√â AVEC GESTION D'ERREURS ROBUSTE
// ==========================================

import React, { createContext, useState, useEffect } from 'react';
import { getCurrentUser, loginUser, registerUser } from '../api/auth';
import { getToken, isTokenValid, removeToken, setToken, clearAuth } from '../utils/token';
import { message } from 'antd';
import { ROLES } from '../utils/permissions';
import { Alert, Snackbar } from '@mui/material';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [authInitialized, setAuthInitialized] = useState(false);

  // Fonction pour afficher les messages
  const showMessage = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  // Fermeture du snackbar
  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  // Fonction pour nettoyer l'√©tat d'authentification
  const resetAuthState = () => {
    setUser(null);
    setError(null);
    clearAuth();
  };

  // Initialisation: v√©rifier si l'utilisateur est d√©j√† connect√©
  useEffect(() => {
    // √âviter la double initialisation
    if (authInitialized) return;
    
    const initAuth = async () => {
      try {
        console.log('üîê Initialisation de l\'authentification...');
        setLoading(true);
        
        // V√©rification pr√©alable du token
        const token = getToken();
        console.log('üé´ Token pr√©sent:', !!token);
        
        if (token) {
          console.log('üîç V√©rification de la validit√© du token...');
          
          // V√©rifier la validit√© du token (g√®re automatiquement les conversions)
          const tokenIsValid = isTokenValid();
          
          if (tokenIsValid) {
            console.log('‚úÖ Token valide, r√©cup√©ration des donn√©es utilisateur...');
            
            try {
              const userData = await getCurrentUser();
              setUser(userData);
              console.log('üë§ Utilisateur connect√©:', userData);
              showMessage('Connexion automatique r√©ussie', 'success');
            } catch (fetchError) {
              console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', fetchError);
              
              // Si l'erreur est 401, le token est invalide c√¥t√© serveur
              if (fetchError.response?.status === 401) {
                console.log('üßπ Token invalide c√¥t√© serveur, nettoyage...');
                resetAuthState();
              } else {
                // Autre erreur, garder le token mais signaler l'erreur
                setError('Impossible de r√©cup√©rer les donn√©es utilisateur');
                showMessage('Erreur de connexion, veuillez vous reconnecter', 'warning');
              }
            }
          } else {
            console.log('‚ùå Token invalide ou expir√©, nettoyage...');
            resetAuthState();
          }
        } else {
          console.log('üì≠ Aucun token trouv√©, utilisateur non connect√©');
          setUser(null);
        }
      } catch (err) {
        console.error('‚ùå Erreur critique lors de l\'initialisation de l\'authentification:', err);
        
        // En cas d'erreur critique, nettoyer compl√®tement
        resetAuthState();
        setError('Erreur d\'initialisation de l\'authentification');
        showMessage('Erreur d\'authentification, veuillez vous connecter', 'error');
      } finally {
        setLoading(false);
        setAuthInitialized(true);
        console.log('üèÅ Initialisation de l\'authentification termin√©e');
      }
    };

    initAuth();
  }, []); // Pas de d√©pendances pour √©viter les boucles

  // Fonction de login avec gestion d'erreur am√©lior√©e
  const login = async (credentials) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîë Tentative de connexion pour:', credentials.email);
      
      const response = await loginUser(credentials);
      
      console.log('‚úÖ Connexion r√©ussie:', response);
      
      // Validation du token re√ßu
      if (!response.token) {
        throw new Error('Aucun token re√ßu du serveur');
      }
      
      // Sauvegarder le token et les donn√©es utilisateur
      setToken(response.token);
      setUser(response.user);
      
      message.success('Connexion r√©ussie');
      showMessage('Connexion r√©ussie', 'success');
      
      return response.user;
    } catch (err) {
      console.error('‚ùå Erreur lors de la connexion:', err);
      
      // Gestion d'erreur plus d√©taill√©e
      let errorMessage = '√âchec de la connexion';
      
      if (err.response) {
        // Erreur de r√©ponse du serveur
        switch (err.response.status) {
          case 401:
            errorMessage = 'Email ou mot de passe incorrect';
            break;
          case 404:
            errorMessage = 'Service d\'authentification non disponible. V√©rifiez que les mocks sont activ√©s.';
            break;
          case 422:
            errorMessage = 'Donn√©es de connexion invalides';
            break;
          case 500:
            errorMessage = 'Erreur serveur, veuillez r√©essayer plus tard';
            break;
          default:
            errorMessage = err.response.data?.message || `Erreur serveur: ${err.response.status}`;
        }
      } else if (err.request) {
        // Erreur de r√©seau
        errorMessage = 'Impossible de contacter le serveur. V√©rifiez votre connexion r√©seau ou la configuration des mocks.';
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
      message.error(errorMessage);
      showMessage(errorMessage, 'error');
      
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Fonction de logout
  const logout = () => {
    console.log('üö™ D√©connexion de l\'utilisateur');
    
    try {
      resetAuthState();
      message.success('D√©connexion r√©ussie');
      showMessage('D√©connexion r√©ussie', 'success');
    } catch (_error) {
      console.error('Erreur lors de la d√©connexion:', error);
      // Forcer le nettoyage m√™me en cas d'erreur
      resetAuthState();
      showMessage('D√©connexion effectu√©e', 'info');
    }
  };

  // Fonction d'enregistrement avec gestion des sous-cat√©gories de staff
  const register = async (userData) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üìù Tentative d\'inscription pour:', userData.email);
      
      // Traitement sp√©cial pour le r√¥le "staff" avec sous-cat√©gories
      let processedData = { ...userData };
      
      if (userData.role === 'staff' && userData.staffType) {
        processedData.role = userData.staffType;
        delete processedData.staffType;
      }
      
      const response = await registerUser(processedData);
      
      console.log('‚úÖ Inscription r√©ussie:', response);
      
      message.success('Inscription r√©ussie. Veuillez vous connecter.');
      showMessage('Inscription r√©ussie. Veuillez vous connecter.', 'success');
      
      return response;
    } catch (err) {
      console.error('‚ùå Erreur lors de l\'inscription:', err);
      
      let errorMessage = '√âchec de l\'inscription';
      
      if (err.response) {
        switch (err.response.status) {
          case 400:
            errorMessage = err.response.data?.message || 'Donn√©es d\'inscription invalides';
            break;
          case 409:
            errorMessage = 'Un compte existe d√©j√† avec cet email';
            break;
          case 422:
            errorMessage = 'Informations incompl√®tes ou invalides';
            break;
          default:
            errorMessage = err.response.data?.message || 'Erreur lors de l\'inscription';
        }
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
      message.error(errorMessage);
      showMessage(errorMessage, 'error');
      
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // Fonction utilitaire pour d√©terminer le type de staff
  const getStaffType = () => {
    if (!user) return null;
    
    switch(user.role) {
      case ROLES.STAFF_BAR:
        return 'bar';
      case ROLES.STAFF_FLOOR:
        return 'floor';
      case ROLES.STAFF_KITCHEN:
        return 'kitchen';
      default:
        return null;
    }
  };

  // Fonction pour v√©rifier si l'utilisateur est un membre du staff
  const isStaff = () => {
    if (!user) return false;
    return user.role === ROLES.STAFF_BAR || 
           user.role === ROLES.STAFF_FLOOR || 
           user.role === ROLES.STAFF_KITCHEN;
  };

  // Fonction pour forcer la r√©initialisation (utile pour le d√©bogage)
  const forceReset = () => {
    console.log('üîÑ R√©initialisation forc√©e de l\'authentification');
    resetAuthState();
    setLoading(false);
    setAuthInitialized(false);
    showMessage('Authentification r√©initialis√©e', 'info');
  };

  // Valeur fournie par le contexte
  const value = {
    user,
    loading,
    error,
    login,
    logout,
    register,
    isAuthenticated: !!user,
    getStaffType,
    isStaff,
    showMessage,
    forceReset, // Fonction de d√©bogage
    authInitialized
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{
            backdropFilter: 'blur(10px)',
            backgroundColor: 'rgba(240, 240, 242, 0.8)',
            borderRadius: '12px'
          }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </AuthContext.Provider>
  );
};